if getgenv().wanderkiddfakepos_loaded then
    return
end
getgenv().wanderkiddfakepos_loaded = true

local api = getfenv().api or {}

local tabs = getgenv().wanderkidd_tabs or {
    lua = api:AddTab('$API'),
}
getgenv().wanderkidd_tabs = tabs

local networkSection = tabs.lua:AddLeftGroupbox('Shadow-Clone Jutsu')

local settingsTabBox = tabs.lua:AddRightTabbox()

local infoTab = settingsTabBox:AddTab('Info')
infoTab:AddLabel(
    'Note: Fake Pos will only work on the normal version of Unamed Enhancements and not the beta version.',
    true
)

local settingsTab = settingsTabBox:AddTab('Settings')
settingsTab:AddButton({
    Text = 'Rejoin',
    Func = function()
        game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
    end,
    DoubleClick = false,
})


getgenv().wanderkiddfakepos = getgenv().wanderkiddfakepos or {}
local wanderkiddfakepos = getgenv().wanderkiddfakepos

wanderkiddfakepos.Network = wanderkiddfakepos.Network
    or {
        FakePos = false,
    }

local framework = {}
framework.keybindPressed = false

if not wanderkiddfakepos._connection then
    wanderkiddfakepos._connection = game:GetService('RunService').Heartbeat
        :Connect(function()
            if wanderkiddfakepos.Network.FakePos then
                pcall(function()
                    local character = game.Players.LocalPlayer.Character
                    if character and character:FindFirstChild('HumanoidRootPart') then
                        local hrp = character.HumanoidRootPart
                        
                        if wanderkiddfakepos._toggleState then
                            sethiddenproperty(hrp, 'NetworkIsSleeping', true)
                        else
                            sethiddenproperty(hrp, 'NetworkIsSleeping', false)
                        end
                        wanderkiddfakepos._toggleState = not wanderkiddfakepos._toggleState
                    end
                end)
            end
        end)
end

if not wanderkiddfakepos._toggleCreated then
    local fakeposToggle = networkSection:AddToggle('fakepos_enabled', {
        Text = 'Fake Pos',
        Default = wanderkiddfakepos.Network.FakePos,
        Callback = function(value)
            wanderkiddfakepos.Network.FakePos = value
            if value then
                wanderkiddfakepos._toggleState = true
                setfflag('S2PhysicsSenderRate', '1')
                setfpscap(1)
                task.wait(0.1)
                setfflag('S2PhysicsSenderRate', '20000')
                setfpscap(240)
            else
                setfflag('S2PhysicsSenderRate', '20000')
                setfpscap(240)
                wanderkiddfakepos._toggleState = nil
                pcall(function()
                    local character = game.Players.LocalPlayer.Character
                    if character and character:FindFirstChild('HumanoidRootPart') then
                        sethiddenproperty(character.HumanoidRootPart, 'NetworkIsSleeping', false)
                    end
                end)
            end
        end,
    })

    networkSection:AddDivider()
    
    networkSection:AddLabel('Toggle Key'):AddKeyPicker('fakepos_keybind', {
        Default = 'F',
        Mode = 'Toggle',
        Text = 'Fake Pos [Shadow-Clone Jutsu]',
        NoUI = false,
        Callback = function()
            if framework.keybindPressed then
                return
            end
            framework.keybindPressed = true
            fakeposToggle:SetValue(not fakeposToggle.Value)
            task.delay(0.2, function()
                framework.keybindPressed = false
            end)
        end,
    })

    wanderkiddfakepos._toggleCreated = true
end

local TabBox = tabs.lua:AddRightTabbox()

local Tab1 = TabBox:AddTab('Misc01')
local Tab2 = TabBox:AddTab('Misc02')
local Tab3 = TabBox:AddTab('Farm')

-- RPG Detection
getgenv().AntiRPGEnabled = false
getgenv().AntiRPGLoop = nil

-- Grenade Detection  
getgenv().AntiGrenadeEnabled = false
getgenv().AntiGrenadeLoop = nil

local RunService = game:GetService('RunService')
local Workspace = game:GetService('Workspace')
local LocalPlayer = game.Players.LocalPlayer
local ReplicatedStorage = game:GetService('ReplicatedStorage')

local function IsRPGNear()
    local Ignored = Workspace:FindFirstChild('Ignored')
    if not Ignored then
        return false
    end
    local HRP = LocalPlayer.Character
        and LocalPlayer.Character:FindFirstChild('HumanoidRootPart')
    if not HRP then
        return false
    end
    local RPG = Ignored:FindFirstChild('Model')
        and Ignored.Model:FindFirstChild('Launcher')
    return RPG ~= nil
end

local function IsGrenadeNear()
    local Ignored = Workspace:FindFirstChild('Ignored')
    if not Ignored then
        return false
    end
    local HRP = LocalPlayer.Character
        and LocalPlayer.Character:FindFirstChild('HumanoidRootPart')
    if not HRP then
        return false
    end
    local Grenade = Ignored:FindFirstChild('Handle')
    local grenadeNear = Grenade
        and (Grenade.Position - HRP.Position).Magnitude < 16
    return grenadeNear
end

local function StartRPGDetection()
    if getgenv().AntiRPGLoop then
        return
    end
    getgenv().AntiRPGLoop = RunService.PostSimulation:Connect(function()
        if not getgenv().AntiRPGEnabled then
            return
        end
        local Character = LocalPlayer.Character
        local HRP = Character and Character:FindFirstChild('HumanoidRootPart')
        local Humanoid = Character and Character:FindFirstChild('Humanoid')
        if not HRP or not Humanoid then
            return
        end
        if IsRPGNear() then
            local Offset = Vector3.new(
                math.random(-100, 100),
                math.random(50, 150),
                math.random(-100, 100)
            )
            Humanoid.CameraOffset = -Offset
            local OldCFrame = HRP.CFrame
            HRP.CFrame = CFrame.new(HRP.Position + Offset)
            RunService.RenderStepped:Wait()
            HRP.CFrame = OldCFrame
        end
    end)
    LocalPlayer.CharacterAdded:Connect(function()
        task.wait(1)
        if getgenv().AntiRPGEnabled then
            StartRPGDetection()
        end
    end)
end

local function StopRPGDetection()
    if getgenv().AntiRPGLoop then
        getgenv().AntiRPGLoop:Disconnect()
        getgenv().AntiRPGLoop = nil
    end
end

local function StartGrenadeDetection()
    if getgenv().AntiGrenadeLoop then
        return
    end
    getgenv().AntiGrenadeLoop = RunService.PostSimulation:Connect(function()
        if not getgenv().AntiGrenadeEnabled then
            return
        end
        local Character = LocalPlayer.Character
        local HRP = Character and Character:FindFirstChild('HumanoidRootPart')
        local Humanoid = Character and Character:FindFirstChild('Humanoid')
        if not HRP or not Humanoid then
            return
        end
        if IsGrenadeNear() then
            local Offset = Vector3.new(
                math.random(-100, 100),
                math.random(50, 150),
                math.random(-100, 100)
            )
            Humanoid.CameraOffset = -Offset
            local OldCFrame = HRP.CFrame
            HRP.CFrame = CFrame.new(HRP.Position + Offset)
            RunService.RenderStepped:Wait()
            HRP.CFrame = OldCFrame
        end
    end)
    LocalPlayer.CharacterAdded:Connect(function()
        task.wait(1)
        if getgenv().AntiGrenadeEnabled then
            StartGrenadeDetection()
        end
    end)
end

local function StopGrenadeDetection()
    if getgenv().AntiGrenadeLoop then
        getgenv().AntiGrenadeLoop:Disconnect()
        getgenv().AntiGrenadeLoop = nil
    end
end

Tab1:AddToggle('RPGDetection', {
    Text = 'RPG Detection',
    Default = false,
    Callback = function(state)
        getgenv().AntiRPGEnabled = state
        if state then
            StartRPGDetection()
        else
            StopRPGDetection()
        end
    end,
})

Tab1:AddToggle('GrenadeDetection', {
    Text = 'Grenade Detection',
    Default = false,
    Callback = function(state)
        getgenv().AntiGrenadeEnabled = state
        if state then
            StartGrenadeDetection()
        else
            StopGrenadeDetection()
        end
    end,
})

local CASH_AURA_ENABLED = false
local COOLDOWN = 0.2
local CASH_AURA_RANGE = 17

local function GetCash()
    local Found = {}
    local Drop = workspace:FindFirstChild('Ignored')
        and workspace.Ignored:FindFirstChild('Drop')

    if Drop then
        for _, v in pairs(Drop:GetChildren()) do
            if v.Name == 'MoneyDrop' then
                local Pos = v:GetAttribute('OriginalPos') or v.Position

                if
                    game.Players.LocalPlayer.Character
                    and game.Players.LocalPlayer.Character:FindFirstChild(
                        'HumanoidRootPart'
                    )
                    and (
                            Pos
                            - game.Players.LocalPlayer.Character.HumanoidRootPart.Position
                        ).Magnitude
                        <= CASH_AURA_RANGE
                then
                    table.insert(Found, v)
                end
            end
        end
    end

    return Found
end

local function CashAura()
    while CASH_AURA_ENABLED do
        local Cash = GetCash()

        for _, v in pairs(Cash) do
            local clickDetector = v:FindFirstChildOfClass('ClickDetector')
            if clickDetector then
                pcall(function()
                    fireclickdetector(clickDetector)
                end)
            end
        end

        task.wait(COOLDOWN)
    end
end

Tab1:AddToggle('Cash_Aura_Toggle', {
    Text = 'Cash Aura',
    Default = false,
    Callback = function(Value)
        CASH_AURA_ENABLED = Value
        if CASH_AURA_ENABLED then
            task.spawn(CashAura)
        end
    end,
})

Tab1:AddToggle('AutoBlockToggle', {
    Text = 'Auto Block',
    Default = false,
    Callback = function(state)
        getgenv().autoBlockEnabled = state

        if getgenv().autoBlockConnection then
            getgenv().autoBlockConnection:Disconnect()
            getgenv().autoBlockConnection = nil
        end

        if state then
            getgenv().autoBlockConnection = game:GetService('RunService').Heartbeat
                :Connect(function()
                    local char = game.Players.LocalPlayer.Character
                    if not char then
                        return
                    end

                    game.ReplicatedStorage.MainEvent:FireServer('Block', true)

                    local hum = char:FindFirstChildOfClass('Humanoid')
                    if hum then
                        for _, anim in ipairs(hum:GetPlayingAnimationTracks()) do
                            if
                                anim.Animation.AnimationId:match('2788354405')
                            then
                                anim:Stop()
                            end
                        end
                    end

                    local effects = char:FindFirstChild('BodyEffects')
                    if effects and effects:FindFirstChild('Block') then
                        effects.Block:Destroy()
                    end
                end)
        end
    end,
})

Tab1:AddToggle('AntiSitToggle', {
    Text = 'Anti Sit',
    Default = false,
    Callback = function(state)
        getgenv().antiSitEnabled = state
        for _, seat in ipairs(workspace:GetDescendants()) do
            if seat:IsA('Seat') or seat:IsA('VehicleSeat') then
                seat.CanTouch = not state
            end
        end
        workspace.DescendantAdded:Connect(function(seat)
            if
                getgenv().antiSitEnabled
                and (seat:IsA('Seat') or seat:IsA('VehicleSeat'))
            then
                seat.CanTouch = false
            end
        end)
    end,
})

Tab1:AddToggle('AntiFlingToggle', {
    Text = 'Anti Fling',
    Default = false,
    Callback = function(state)
        local rs = game:GetService("RunService")
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        
        if state then
            if _G.fling then 
                _G.fling:Disconnect() 
                _G.fling = nil
            end
            
            local function startAntiFling()
                local character = LocalPlayer.Character
                if not character then return end
                
                local hrp = character:FindFirstChild("HumanoidRootPart")
                if not hrp then return end
                
                local last = hrp.Position
                
                _G.fling = rs.Heartbeat:Connect(function()
                    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        return
                    end
                    
                    local currentHrp = LocalPlayer.Character.HumanoidRootPart
                    local distance = (currentHrp.Position - last).Magnitude
                    
                    if distance > 1 then
                        currentHrp.CFrame = CFrame.new(last)
                        currentHrp.Velocity = Vector3.zero
                        currentHrp.AssemblyLinearVelocity = Vector3.zero
                        currentHrp.AssemblyAngularVelocity = Vector3.zero
                        
                        for _, obj in pairs(currentHrp:GetChildren()) do
                            if obj:IsA("BodyVelocity") or obj:IsA("BodyAngularVelocity") or obj:IsA("BodyPosition") or obj:IsA("BodyThrust") or obj:IsA("BodyMover") then
                                obj:Destroy()
                            end
                        end
                        
                        for _, obj in pairs(LocalPlayer.Character:GetChildren()) do
                            if obj:IsA("BodyVelocity") or obj:IsA("BodyAngularVelocity") or obj:IsA("BodyPosition") or obj:IsA("BodyThrust") or obj:IsA("BodyMover") then
                                obj:Destroy()
                            end
                        end
                        
                        task.spawn(function()
                            for i = 1, 10 do
                                task.wait(0.01)
                                if currentHrp then
                                    currentHrp.CFrame = CFrame.new(last)
                                    currentHrp.Velocity = Vector3.zero
                                    currentHrp.AssemblyLinearVelocity = Vector3.zero
                                    currentHrp.AssemblyAngularVelocity = Vector3.zero
                                end
                            end
                        end)
                        
                        local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
                        if humanoid then
                            humanoid.PlatformStand = true
                            task.wait(0.1)
                            humanoid.PlatformStand = false
                        end
                    else
                        last = currentHrp.Position
                    end
                end)
            end
            
            startAntiFling()
            
            _G.characterAddedConnection = LocalPlayer.CharacterAdded:Connect(function()
                task.wait(1)
                startAntiFling()
            end)
            
        else
            if _G.fling then 
                _G.fling:Disconnect() 
                _G.fling = nil
            end
            if _G.characterAddedConnection then
                _G.characterAddedConnection:Disconnect()
                _G.characterAddedConnection = nil
            end
        end
    end,
})

-- Misc02 Tab Content
local function findKeyButton()
    local shopFolder = workspace:FindFirstChild('Ignored')
    if shopFolder then
        local shop = shopFolder:FindFirstChild('Shop')
        if shop then
            for _, item in pairs(shop:GetChildren()) do
                -- More specific check: must contain [Key] and $137, but NOT LockPicker
                local itemName = item.Name:lower()
                if itemName:find('%[key%]') and itemName:find('$137') and not itemName:find('lockpicker') then
                    return item
                end
            end
        end
    end
    return nil
end

local function equipKey()
    local localPlayer = game.Players.LocalPlayer
    local character = localPlayer.Character
    local backpack = localPlayer:FindFirstChild('Backpack')
    
    if not character or not backpack then
        return nil
    end
    
    -- Look for key in backpack
    local key = backpack:FindFirstChild('[Key]')
    if not key then
        return nil
    end
    
    -- Equip the key
    local humanoid = character:FindFirstChild('Humanoid')
    if humanoid then
        humanoid:EquipTool(key)
        task.wait(0.1) -- Wait for equip to complete
        return key
    end
    
    return nil
end

local function useKey(key)
    if key and key:IsA('Tool') then
        key:Activate()
        task.wait(0.1)
        return true
    end
    return false
end

local function teleportToUnjailPositionAndBuyKey()
    local localPlayer = game.Players.LocalPlayer
    if not localPlayer.Character or not localPlayer.Character:FindFirstChild('HumanoidRootPart') then
        api:notify('Character not found!', 3)
        return
    end
    
    -- Save original position
    local originalPosition = localPlayer.Character.HumanoidRootPart.CFrame
    
    -- Teleport to the specified unjail position
    local unjailPosition = Vector3.new(-270.74212646484375, 21.74802017211914, -241.5172119140625)
    localPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(unjailPosition)
    
    -- Wait a moment for teleport to complete
    task.wait(0.5)
    
    -- Find and buy the key
    local keyButton = findKeyButton()
    if keyButton then
        -- Find and click the key button
        local clickDetector = keyButton:FindFirstChild('ClickDetector') or keyButton:FindFirstChildWhichIsA('ClickDetector', true)
        if clickDetector then
            fireclickdetector(clickDetector)
            api:notify('Key purchased! Equipping and using...', 3)
            
            -- Wait for key to appear in backpack
            task.wait(1)
            
            -- Equip the key
            local key = equipKey()
            if key then
                api:notify('Key equipped! Using key...', 2)
                
                -- Use the key
                if useKey(key) then
                    api:notify('Unjail complete! Key used successfully!', 3)
                else
                    api:notify('Key equipped but failed to use!', 3)
                end
            else
                api:notify('Key purchased but failed to equip!', 3)
            end
        else
            api:notify('Teleported but could not find ClickDetector!', 3)
        end
    else
        api:notify('Teleported but key button not found!', 3)
    end
end

Tab2:AddButton({
    Text = 'Unjail',
    Func = function()
        teleportToUnjailPositionAndBuyKey()
    end,
    DoubleClick = false,
    Tooltip = 'Teleport to unjail position and buy key',
})

local Players = game:GetService('Players')
local RunService = game:GetService('RunService')
local TweenService = game:GetService('TweenService')
local LocalPlayer = Players.LocalPlayer

local cashierFolder = workspace:FindFirstChild('Cashiers')
local dropFolder = workspace:FindFirstChild('Ignored')
    and workspace.Ignored:FindFirstChild('Drop')
local attackRadius = 15

local farming = false
local currentCharacter = LocalPlayer.Character
    or LocalPlayer.CharacterAdded:Wait()
local healthConnection = nil
local attackThread = nil
local farmingThread = nil
local noclipConnection = nil
local antiAFKConnection = nil
local antiSitConnection = nil

LocalPlayer.CharacterAdded:Connect(function(char)
    currentCharacter = char
    if farming then
        task.wait(5)
        startFarming()
        monitorHealth(true)
    end
end)

function monitorHealth(enable)
    local humanoid = currentCharacter:WaitForChild('Humanoid', 5)
    if not humanoid then
        return
    end

    if healthConnection then
        healthConnection:Disconnect()
        healthConnection = nil
    end

    if enable then
        healthConnection = humanoid.HealthChanged:Connect(function(newHealth)
            if newHealth < 3 then
                if currentCharacter then
                    currentCharacter:BreakJoints()
                end
                if humanoid and humanoid.Health > 0 then
                    humanoid.Health = 0
                end
                task.delay(0.5, function()
                    if humanoid and humanoid.Health > 0 then
                        humanoid:Destroy()
                    end
                end)
            end
        end)
    end
end

local function equipCombat()
    if not currentCharacter then
        return
    end
    local backpack = LocalPlayer:FindFirstChild('Backpack')
    if not backpack then
        return
    end

    local tool = currentCharacter:FindFirstChild('Combat')
        or backpack:FindFirstChild('Combat')
    if not tool then
        return
    end
    if currentCharacter:FindFirstChild('Combat') == nil then
        LocalPlayer.Character.Humanoid:EquipTool(tool)
    end
end

local function autoAttack()
    if attackThread then
        return
    end
    attackThread = task.spawn(function()
        while
            farming
            and currentCharacter
            and currentCharacter:FindFirstChild('Humanoid')
        do
            local combatTool = currentCharacter:FindFirstChild('Combat')
            if combatTool then
                combatTool:Activate()
            else
                equipCombat()
            end
            task.wait(1)
        end
        attackThread = nil
    end)
end

local function setNoClip(enabled)
    if enabled then
        noclipConnection = RunService.Stepped:Connect(function()
            if currentCharacter then
                for _, part in pairs(currentCharacter:GetChildren()) do
                    if part:IsA('BasePart') then
                        part.CanCollide = false
                    end
                end
            end
        end)
    else
        if noclipConnection then
            noclipConnection:Disconnect()
            noclipConnection = nil
        end
        if currentCharacter then
            for _, part in pairs(currentCharacter:GetChildren()) do
                if part:IsA('BasePart') then
                    part.CanCollide = true
                end
            end
        end
    end
end

local function startAntiAFK()
    if antiAFKConnection then
        antiAFKConnection:Disconnect()
        antiAFKConnection = nil
    end
    
    antiAFKConnection = RunService.Heartbeat:Connect(function()
        if not farming then
            return
        end
        
        local character = LocalPlayer.Character
        if character and character:FindFirstChild('Humanoid') then
            local humanoid = character.Humanoid
            humanoid:Move(Vector3.new(math.random(-1, 1), 0, math.random(-1, 1)))
        end
    end)
end

local function startAntiSit()
    if antiSitConnection then
        antiSitConnection:Disconnect()
        antiSitConnection = nil
    end
    
    for _, seat in ipairs(workspace:GetDescendants()) do
        if seat:IsA('Seat') or seat:IsA('VehicleSeat') then
            seat.CanTouch = false
        end
    end
    
    antiSitConnection = workspace.DescendantAdded:Connect(function(seat)
        if farming and (seat:IsA('Seat') or seat:IsA('VehicleSeat')) then
            seat.CanTouch = false
        end
    end)
end

local function stopAntiAFK()
    if antiAFKConnection then
        antiAFKConnection:Disconnect()
        antiAFKConnection = nil
    end
end

local function stopAntiSit()
    if antiSitConnection then
        antiSitConnection:Disconnect()
        antiSitConnection = nil
    end
    
    for _, seat in ipairs(workspace:GetDescendants()) do
        if seat:IsA('Seat') or seat:IsA('VehicleSeat') then
            seat.CanTouch = true
        end
    end
end

local function tweenToPosition(position, duration)
    if
        currentCharacter
        and currentCharacter:FindFirstChild('HumanoidRootPart')
    then
        local hrp = currentCharacter.HumanoidRootPart
        local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
        local tween = TweenService:Create(
            hrp,
            tweenInfo,
            { CFrame = CFrame.new(position) }
        )
        tween:Play()
        tween.Completed:Wait()
    end
end

local function tpInsideModelTween(model)
    local rootPart = model.PrimaryPart
        or model:FindFirstChildWhichIsA('BasePart', true)
    if not rootPart then
        return
    end
    local targetPos = rootPart.Position
    tweenToPosition(targetPos, 0.4)
end

local function collectDrops()
    if
        not dropFolder
        or not currentCharacter
        or not currentCharacter:FindFirstChild('HumanoidRootPart')
    then
        return
    end
    
    local hrp = currentCharacter.HumanoidRootPart
    local hrpPos = hrp.Position
    
    for _, drop in ipairs(dropFolder:GetChildren()) do
        if drop:IsA('BasePart') then
            local dist = (drop.Position - hrpPos).Magnitude
            if dist <= attackRadius then
                local clickDetector = drop:FindFirstChildWhichIsA('ClickDetector', true)
                if clickDetector then
                    fireclickdetector(clickDetector)
                    task.wait(0.5)
                end
            end
        end
    end
end

function startFarming()
    if farmingThread then
        return
    end
    
    startAntiAFK()
    startAntiSit()
    
    farmingThread = task.spawn(function()
        setNoClip(true)
        while farming do
            if not cashierFolder then
                break
            end
            local cashiers = cashierFolder:GetChildren()
            for i = 1, #cashiers do
                if not farming then
                    break
                end
                local cashier = cashiers[i]
                if cashier.Name == 'CA$HIER' then
                    local humanoid =
                        cashier:FindFirstChildWhichIsA('Humanoid', true)
                    if humanoid and humanoid.Health > 0 then
                        if not cashier.PrimaryPart then
                            local firstPart =
                                cashier:FindFirstChildWhichIsA('BasePart', true)
                            if firstPart then
                                cashier.PrimaryPart = firstPart
                            else
                                continue
                            end
                        end

                        equipCombat()
                        tpInsideModelTween(cashier)
                        autoAttack()
                        
                        local punchCount = 0
                        local maxPunches = 10
                        local originalHealth = humanoid.Health
                        local atmDefeated = false
                        
                        while farming and humanoid.Health > 0 do
                            collectDrops()
                            tpInsideModelTween(cashier)
                            
                            if humanoid.Health >= originalHealth then
                                punchCount = punchCount + 1
                                if punchCount > maxPunches then
                                    break
                                end
                            else
                                punchCount = 0
                                originalHealth = humanoid.Health
                            end
                        end
                        
                        if humanoid.Health <= 0 then
                            atmDefeated = true
                        end
                        
                        if atmDefeated then
                            local dropsRemain = true
                            local collectionAttempts = 0
                            local maxCollectionAttempts = 50
                            
                            while farming and dropsRemain and collectionAttempts < maxCollectionAttempts do
                                dropsRemain = false
                                collectionAttempts = collectionAttempts + 1
                                
                                if
                                    dropFolder
                                    and currentCharacter
                                    and currentCharacter:FindFirstChild(
                                        'HumanoidRootPart'
                                    )
                                then
                                    local hrp = currentCharacter.HumanoidRootPart
                                    local hrpPos = hrp.Position
                                    
                                    for _, drop in ipairs(dropFolder:GetChildren()) do
                                        if drop:IsA('BasePart') then
                                            local dist = (drop.Position - hrpPos).Magnitude
                                            if dist <= attackRadius then
                                                dropsRemain = true
                                                break
                                            end
                                        end
                                    end
                                end
                                
                                if dropsRemain then
                                    collectDrops()
                                    tpInsideModelTween(cashier)
                                    task.wait(0.3)
                                end
                            end
                        end

                        task.wait(1)
                    end
                end
            end
            task.wait(1)
        end
        setNoClip(false)
        farmingThread = nil
        attackThread = nil
    end)
end

function stopFarming()
    farming = false
    farmingThread = nil
    attackThread = nil
    setNoClip(false)
    
    stopAntiAFK()
    stopAntiSit()
end


Tab3:AddToggle('cashatmfarm', {
    Text = 'ATM Farm',
    Default = false,
    Callback = function(Value)
        Toggles.AutoStompFarm:SetValue(false)

        if Value then
            farming = true
            monitorHealth(true)
            startFarming()
        else
            stopFarming()
            monitorHealth(false)
        end
    end,
})

local Players = game:GetService('Players')
local Workspace = game:GetService('Workspace')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local RunService = game:GetService('RunService')

local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer:WaitForChild('Backpack')

local AutoStompPos = CFrame.new(-1123, 21.75, -217.5)
local Event = ReplicatedStorage:WaitForChild('MainEvent')

local farmEnabled = false
local stompTask
local originalStompPosition = nil

local function Teleport(pos)
    local char = LocalPlayer.Character
    if char and char:FindFirstChild('HumanoidRootPart') then
        char.HumanoidRootPart.CFrame = pos
    end
end

local function GetPlayerPositionForTeleport(character)
    local root = character:FindFirstChild('HumanoidRootPart')
    if not root then
        return nil
    end
    local parts = {}
    for _, part in ipairs(character:GetChildren()) do
        if part:IsA('BasePart') then
            table.insert(parts, part.Position)
        end
    end
    if #parts == 0 then
        return root.CFrame + Vector3.new(0, 3, 0)
    end
    local sum = Vector3.new(0, 0, 0)
    for _, pos in ipairs(parts) do
        sum = sum + pos
    end
    local avgPos = sum / #parts
    return CFrame.new(avgPos + Vector3.new(0, 3, 0))
end

local function GetValidTargets()
    local targets = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local humanoid = player.Character:FindFirstChildOfClass('Humanoid')
            local root = player.Character:FindFirstChild('HumanoidRootPart')
            if
                humanoid
                and root
                and humanoid.Health <= 2
                and humanoid.Health > 0
            then
                table.insert(targets, root)
            end
        end
    end
    return targets
end

local function StartStompFarm()
    stompTask = task.spawn(function()
        while farmEnabled do
            local targets = GetValidTargets()
            for _, targetRoot in pairs(targets) do
                if not farmEnabled then
                    break
                end
                local teleportPos =
                    GetPlayerPositionForTeleport(targetRoot.Parent)
                if teleportPos then
                    Teleport(teleportPos)
                else
                    Teleport(targetRoot.CFrame + Vector3.new(0, 3, 0))
                end
                task.wait(0.2)
                Event:FireServer('Stomp')
                task.wait(0.1)
                Teleport(AutoStompPos)
                task.wait(0.2)
            end
            task.wait(0.5)
        end
    end)
end

local function StopStompFarm()
    farmEnabled = false
    if stompTask then
        task.cancel(stompTask)
        stompTask = nil
    end
    
    if originalStompPosition then
        Teleport(originalStompPosition)
        originalStompPosition = nil
    end
end

local function OnCharacterAdded(char)
    char:WaitForChild('HumanoidRootPart')
    if farmEnabled then
        Teleport(AutoStompPos)
    end
end

LocalPlayer.CharacterAdded:Connect(OnCharacterAdded)

Tab3:AddToggle('AutoStompFarm', {
    Text = 'Stomp Farm',
    Default = false,
    Callback = function(Value)
        farmEnabled = Value
        if farmEnabled then
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('HumanoidRootPart') then
                originalStompPosition = LocalPlayer.Character.HumanoidRootPart.CFrame
            end
            
            if
                not (
                    LocalPlayer.Character
                    and LocalPlayer.Character:FindFirstChild('HumanoidRootPart')
                )
            then
                LocalPlayer.CharacterAdded:Wait()
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('HumanoidRootPart') then
                    originalStompPosition = LocalPlayer.Character.HumanoidRootPart.CFrame
                end
            end
            Teleport(AutoStompPos)
            StartStompFarm()
        else
            StopStompFarm()
        end
    end,
})

do
    local Players = game:GetService('Players')
    local RunService = game:GetService('RunService')
    local player = Players.LocalPlayer
    local targetPos = Vector3.new(-279.602, 22.568, -1142.230)
    local toolName = 'Combat'
    local toggleEnabled = false
    local heartbeatConn
    local charAddedConn
    local activateLoopRunning = false
    local activateLoopCancel = false
    local originalPos = nil
    local targetPart =
        workspace.MAP.Map['Punching(BAGS)']:GetChildren()[3]['pretty ransom']

    local function equipTool(character)
        if not character then
            return nil
        end
        local backpack = player:WaitForChild('Backpack')
        local humanoid = character:FindFirstChildOfClass('Humanoid')
        if not humanoid then
            return nil
        end
        local tool = backpack:FindFirstChild(toolName)
            or character:FindFirstChild(toolName)
        if tool then
            if character:FindFirstChild(toolName) ~= tool then
                humanoid:EquipTool(tool)
                task.wait(0.01)
            end
            return tool
        end
        return nil
    end

    local function unequipTools(character)
        if not character then
            return
        end
        local humanoid = character:FindFirstChildOfClass('Humanoid')
        if humanoid then
            humanoid:UnequipTools()
        end
    end

    local function teleportAndFacePart(character, part)
        local hrp = character:FindFirstChild('HumanoidRootPart')
        if hrp and part then
            local bagPosition = part.Position
            hrp.CFrame = CFrame.new(bagPosition + Vector3.new(0, 2, 0), bagPosition + Vector3.new(0, 0, 1))
        end
    end

    local function activateToolLoop(tool)
        activateLoopRunning = true
        activateLoopCancel = false
        local humanoid = player.Character
            and player.Character:FindFirstChildOfClass('Humanoid')
        while
            toggleEnabled
            and tool
            and tool.Parent
            and not activateLoopCancel
            and humanoid
        do
            if
                player.Character
                and player.Character:FindFirstChild(toolName) ~= tool
            then
                humanoid:EquipTool(tool)
                task.wait(0.01)
            end
            if tool.Activate then
                tool:Activate()
            end
            task.wait(0.01)
            humanoid:UnequipTools()
            task.wait(0.01)
            humanoid:EquipTool(tool)
            task.wait(0.01)
        end
        activateLoopRunning = false
    end

    local function stopAll()
        toggleEnabled = false
        activateLoopCancel = true
        if heartbeatConn then
            heartbeatConn:Disconnect()
            heartbeatConn = nil
        end
        if charAddedConn then
            charAddedConn:Disconnect()
            charAddedConn = nil
        end
        local character = player.Character
        if character and character.Parent then
            local hrp = character:FindFirstChild('HumanoidRootPart')
            if hrp and originalPos then
                hrp.CFrame = originalPos
            end
            unequipTools(character)
        end
        originalPos = nil
    end

    local function onToggleChanged(value)
        if value == toggleEnabled then
            return
        end
        toggleEnabled = value
        if not toggleEnabled then
            stopAll()
            return
        end
        local character = player.Character
        if character and character.Parent then
            local hrp = character:FindFirstChild('HumanoidRootPart')
            if hrp then
                originalPos = hrp.CFrame
            end
        end
        activateLoopCancel = false
        heartbeatConn = RunService.Heartbeat:Connect(function()
            if not toggleEnabled then
                return
            end
            local character = player.Character
            if not character or not character.Parent then
                return
            end
            teleportAndFacePart(character, targetPart)
            local tool = equipTool(character)
            local humanoid = character:FindFirstChildOfClass('Humanoid')
            if humanoid and humanoid.Health < 2 then
                humanoid.Health = 0
            end
            if tool and not activateLoopRunning then
                task.spawn(function()
                    activateToolLoop(tool)
                end)
            end
        end)
        charAddedConn = player.CharacterAdded:Connect(function(char)
            if toggleEnabled then
                task.wait(0.01)
                teleportAndFacePart(char, targetPart)
                equipTool(char)
            end
        end)
    end

    Tab3:AddToggle('BoxingFarm', {
        Text = 'Boxing Farm',
        Default = false,
        Callback = function(value)
            onToggleChanged(value)
        end,
    })
end

local originalLettucePosition = nil

Tab3:AddToggle('lettuceToggle', {
    Text = 'Auto Lettuce',
    Default = false,
    Callback = function(value)
        if value then
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('HumanoidRootPart') then
                originalLettucePosition = LocalPlayer.Character.HumanoidRootPart.CFrame
            end
        else
            if originalLettucePosition then
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('HumanoidRootPart') then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = originalLettucePosition
                end
                originalLettucePosition = nil
            end
        end
    end,
})

local function fireClickDetector(cd)
    if cd and cd:IsA('ClickDetector') then
        fireclickdetector(cd)
    end
end

local function equipLettuce()
    local tool = LocalPlayer.Backpack:FindFirstChild('[Lettuce]')
    if tool then
        tool.Parent = LocalPlayer.Character
        return tool
    end
    return nil
end

local function activateLettuce()
    local tool = LocalPlayer.Character
        and LocalPlayer.Character:FindFirstChild('[Lettuce]')
    if tool and tool:IsA('Tool') then
        tool:Activate()
        return true
    end
    return false
end

local function buyLettuce()
    LocalPlayer.Character:PivotTo(CFrame.new(-86.74, 23.32, -632.27))
    task.wait(0.05)
    local shop = Workspace:FindFirstChild('Ignored')
        and Workspace.Ignored:FindFirstChild('Shop')
    if shop then
        for _, obj in ipairs(shop:GetDescendants()) do
            if
                obj:IsA('ClickDetector')
                and obj.Parent
                and obj.Parent.Name == '[Lettuce] - $5'
            then
                fireClickDetector(obj)
                break
            end
        end
    end
    task.wait(0.1)
end

task.spawn(function()
    while true do
        if Toggles.lettuceToggle.Value then
            local hasLettuce = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('[Lettuce]')
            
            if not hasLettuce then
                buyLettuce()
                equipLettuce()
            end
            
            local activated = activateLettuce()
            
            if not activated then
                task.wait(0.05)
                buyLettuce()
                equipLettuce()
            end
        end
        task.wait(0.05)
    end
end)

local toggleName = 'HeavyWeightsAuto'

Tab3:AddToggle(toggleName, {
    Text = 'Auto Weights',
    Default = false,
})

local activationConnection
local respawnConnection
local toolMonitorConnection
local originalWeightPosition = nil

local function getCharacter()
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local hrp = char:WaitForChild('HumanoidRootPart')
    return char, hrp
end

local function teleportTo(pos)
    local _, hrp = getCharacter()
    hrp.CFrame = CFrame.new(pos)
    task.wait(0.5)
end

local function findShopItem()
    local shopFolder = Workspace.Ignored.Shop
    for _, item in ipairs(shopFolder:GetChildren()) do
        if item.Name:lower():find('heavyweights') then
            return item
        end
    end
    return nil
end

local function fireClickDetector(shopItem)
    if not shopItem then
        return
    end
    local clickDetector = nil
    if shopItem:IsA('ClickDetector') then
        clickDetector = shopItem
    else
        clickDetector = shopItem:FindFirstChild('ClickDetector')
            or shopItem:FindFirstChildWhichIsA('ClickDetector', true)
    end
    if clickDetector and clickDetector:IsA('ClickDetector') then
        pcall(function()
            fireclickdetector(clickDetector)
        end)
    end
end

local function equipTool(toolName)
    local character = LocalPlayer.Character
    if character then
        local equippedTool = character:FindFirstChild(toolName)
        if equippedTool and equippedTool:IsA('Tool') then
            return equippedTool
        end
    end
    
    for i = 1, 50 do
        local tool = Backpack:FindFirstChild(toolName)
        if tool and tool:IsA('Tool') then
            local humanoid = character and character:FindFirstChild('Humanoid')
            if humanoid then
                humanoid:EquipTool(tool)
                task.wait(0.1)
                return tool
            end
        end
        task.wait(0.05)
    end
    return nil
end

local function autoActivateTool(tool)
    if activationConnection then
        activationConnection:Disconnect()
        activationConnection = nil
    end
    activationConnection = RunService.Heartbeat:Connect(function()
        if not Toggles[toggleName].Value then
            return
        end
        
        local character = LocalPlayer.Character
        if not character then
            return
        end
        
        local humanoid = character:FindFirstChild('Humanoid')
        if not humanoid then
            return
        end
        
        local equippedTool = character:FindFirstChild('[HeavyWeights]')
        if not equippedTool then
            local backpackTool = Backpack:FindFirstChild('[HeavyWeights]')
            if backpackTool then
                humanoid:EquipTool(backpackTool)
                tool = backpackTool
            end
        else
            tool = equippedTool
        end
        
        if tool and tool.Parent == character then
            pcall(function()
                tool:Activate()
            end)
        end
    end)
end

local function mainProcess()
    teleportTo(Vector3.new(-46.36, 23.57, -653.74))
    local shopItem = findShopItem()
    if not shopItem then
        return
    end
    fireClickDetector(shopItem)
    task.wait(0.5)
    teleportTo(Vector3.new(768.47, 112.62, -787.92))
    
    local tool = equipTool('[HeavyWeights]')
    if tool then
        autoActivateTool(tool)
    else
        task.wait(0.5)
        tool = equipTool('[HeavyWeights]')
        if tool then
            autoActivateTool(tool)
        end
    end
end

local function onToggleChanged(value)
    if not value then
        if activationConnection then
            activationConnection:Disconnect()
            activationConnection = nil
        end
        if respawnConnection then
            respawnConnection:Disconnect()
            respawnConnection = nil
        end
        if toolMonitorConnection then
            toolMonitorConnection:Disconnect()
            toolMonitorConnection = nil
        end
        
        if originalWeightPosition then
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('HumanoidRootPart') then
                LocalPlayer.Character.HumanoidRootPart.CFrame = originalWeightPosition
            end
            originalWeightPosition = nil
        end
        return
    end
    
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('HumanoidRootPart') then
        originalWeightPosition = LocalPlayer.Character.HumanoidRootPart.CFrame
    end
    
    if toolMonitorConnection then
        toolMonitorConnection:Disconnect()
        toolMonitorConnection = nil
    end
    
    toolMonitorConnection = RunService.Heartbeat:Connect(function()
        if not Toggles[toggleName].Value then
            return
        end
        
        local character = LocalPlayer.Character
        if not character then
            return
        end
        
        local humanoid = character:FindFirstChild('Humanoid')
        if not humanoid then
            return
        end
        
        local equippedTool = character:FindFirstChild('[HeavyWeights]')
        if not equippedTool then
            local backpackTool = Backpack:FindFirstChild('[HeavyWeights]')
            if backpackTool then
                humanoid:EquipTool(backpackTool)
            end
        end
    end)
    
    task.spawn(mainProcess)
    if respawnConnection then
        respawnConnection:Disconnect()
        respawnConnection = nil
    end
    respawnConnection = LocalPlayer.CharacterAdded:Connect(function()
        task.wait(2)
        if Toggles[toggleName].Value then
            task.spawn(mainProcess)
        end
    end)
end

Toggles[toggleName]:OnChanged(onToggleChanged)

local playerListSection = tabs.lua:AddLeftGroupbox('PlayerList')

local function getAllPlayers()
    local players = {}
    for _, player in pairs(game.Players:GetPlayers()) do
        table.insert(players, {
            username = player.Name,
            displayName = player.DisplayName
        })
    end
    return players
end

local playerDropdown = playerListSection:AddDropdown('player_dropdown', {
    Values = {},
    Default = 1,
    Multi = false,
    Text = 'Select Player',
    Tooltip = 'Choose a player from the list',
    Callback = function(value)
    end,
})

local function updatePlayerDropdown()
    local players = getAllPlayers()
    local playerNames = {}
    for _, player in ipairs(players) do
        table.insert(playerNames, player.username)
    end
    playerDropdown:SetValues(playerNames)
end

updatePlayerDropdown()

game.Players.PlayerAdded:Connect(function()
    task.wait(0.1)
    updatePlayerDropdown()
end)

game.Players.PlayerRemoving:Connect(function()
    updatePlayerDropdown()
end)

local liveNote = playerListSection:AddLabel('result: ?', true)
liveNote.Name = 'live_note'

local lastValidMatch = nil

local searchInput = playerListSection:AddInput('player_search', {
    Text = 'player search',
    Tooltip = '$$$SUDO APT OPSEC',
    Placeholder = '',
    Callback = function(value)
        local players = getAllPlayers()
        
        if value == '' then
            liveNote:SetText('result: ?')
            lastValidMatch = nil
            return
        end
        
        local searchTerm = value:lower()
        local closestMatch = nil
        local closestDistance = math.huge
        
        local exactMatches = {}
        local containsMatches = {}
        
        for _, player in ipairs(players) do
            local username = player.username:lower()
            local displayName = player.displayName:lower()
            
            if username:sub(1, #searchTerm) == searchTerm or displayName:sub(1, #searchTerm) == searchTerm then
                table.insert(exactMatches, player)
            elseif username:find(searchTerm, 1, true) or displayName:find(searchTerm, 1, true) then
                table.insert(containsMatches, player)
            end
        end
        
        if #exactMatches > 0 then
            for _, player in ipairs(exactMatches) do
                local username = player.username:lower()
                local displayName = player.displayName:lower()
                
                local usernameMatch = username:find(searchTerm, 1, true)
                local displayNameMatch = displayName:find(searchTerm, 1, true)
                
                local distance = math.huge
                if usernameMatch then
                    distance = math.min(distance, usernameMatch - 1)
                end
                if displayNameMatch then
                    distance = math.min(distance, displayNameMatch - 1)
                end
                
                if distance < closestDistance then
                    closestDistance = distance
                    closestMatch = player
                end
            end
        elseif #containsMatches > 0 then
            closestMatch = containsMatches[1]
        end
        
        if closestMatch then
            lastValidMatch = closestMatch
            
            local displayUsername = closestMatch.username
            liveNote:SetText('result: ' .. displayUsername .. ' (' .. closestMatch.displayName .. ')')
            
            local playerNames = {}
            for _, player in ipairs(players) do
                table.insert(playerNames, player.username)
            end
            
            playerDropdown:SetValues(playerNames)
            
            for i, name in ipairs(playerNames) do
                if name == closestMatch.username then
                    task.wait(0.01)
                    playerDropdown:SetValue(i)
                    task.wait(0.01)
                    playerDropdown:SetValue(closestMatch.username)
                    break
                end
            end
        else
            if lastValidMatch then
                local displayUsername = lastValidMatch.username
                liveNote:SetText('result: ' .. displayUsername .. ' (' .. lastValidMatch.displayName .. ')')
            else
                liveNote:SetText('result: ')
            end
        end
    end,
})

local function KnockCheck(player)
    if player and player.Character then
        local bodyEffects = player.Character:FindFirstChild("BodyEffects")
        if bodyEffects then
            local knockOut = bodyEffects:FindFirstChild("K.O")
            return knockOut and knockOut.Value == true
        end
    end

    return false
end

local function isPlayerDead(player)
    if player and player.Character then
        local bodyEffects = player.Character:FindFirstChild("BodyEffects")
        if bodyEffects then
            local deathEffect = bodyEffects:FindFirstChild("SDeath")
            return deathEffect and deathEffect.Value == true
        end
    end
    return false
end

local function checkStompSuccess(player, originalHealth)
    if not player or not player.Character then
        return false
    end
    
    local bodyEffects = player.Character:FindFirstChild("BodyEffects")
    if not bodyEffects then
        return false
    end
    
    local healthEffect = bodyEffects:FindFirstChild("Health")
    local currentHealth = healthEffect and healthEffect.Value or 0
    
    local isDead = isPlayerDead(player)
    local stillKnocked = KnockCheck(player)
    
    -- More detailed debug info
    local healthDiff = originalHealth - currentHealth
    api:notify(string.format("Health: %.1f -> %.1f (Diff: %.1f, Dead: %s, Knocked: %s)", originalHealth, currentHealth, healthDiff, tostring(isDead), tostring(stillKnocked)), 3)
    
    -- Try multiple verification methods
    local healthDecreased = healthDiff > 0.5  -- Lower threshold
    local healthZero = currentHealth <= 0
    local significantDamage = healthDiff > 5.0  -- Significant damage
    
    -- Check if target is no longer knocked (might indicate stomp hit)
    local wasKnockedBefore = true  -- We assume they were knocked since we're stomping
    local noLongerKnocked = wasKnockedBefore and not stillKnocked
    
    local success = isDead or healthDecreased or healthZero or significantDamage or noLongerKnocked
    
    api:notify(string.format("Verification: Damage=%.1f, Dead=%s, Success=%s", healthDiff, tostring(isDead), tostring(success)), 2)
    
    return success
end

local stickyAimEnabled = false
local stickyAimTarget = nil
local originalNamecall = nil
local stickyAimActive = false

local knockSequenceActive = false
local savedOriginalPosition = nil

local function hasForcefield(player)
    if player and player.Character then
        local forcefield = player.Character:FindFirstChild("ForceField")
        return forcefield ~= nil
    end
    return false
end

local function enableStickySilentAim(targetPlayer)
    if not targetPlayer then return end
    
    stickyAimEnabled = true
    stickyAimTarget = targetPlayer
    
    if not originalNamecall then
        pcall(function()
            originalNamecall = getrawmetatable(game).__namecall
            
            getrawmetatable(game).__namecall = function(self, ...)
            local args = {...}
            local method = getnamecallmethod()
            
            if stickyAimEnabled and stickyAimTarget and stickyAimTarget.Character and stickyAimActive then
                if method == "FireServer" and self == MainEvent and args[1] == "ShootGun" then
                    if hasForcefield(stickyAimTarget) then
                    else
                        local targetHead = stickyAimTarget.Character:FindFirstChild("Head")
                        if targetHead then
                            args[4] = targetHead.Position
                            args[5] = targetHead
                        end
                    end
                end
            end
            
            return originalNamecall(self, ...)
        end
        end)
    end
end

local function disableStickySilentAim()
    stickyAimEnabled = false
    stickyAimTarget = nil
    stickyAimActive = false
end

local MainEvent = nil
if game:GetService("ReplicatedStorage"):FindFirstChild("MainEvent") then
    MainEvent = game:GetService("ReplicatedStorage").MainEvent
elseif game:GetService("ReplicatedStorage"):FindFirstChild("MAINEVENT") then
    MainEvent = game:GetService("ReplicatedStorage").MAINEVENT
elseif game:GetService("ReplicatedStorage"):WaitForChild("MainRemotes"):WaitForChild("MainRemoteEvent") then
    MainEvent = game:GetService("ReplicatedStorage"):WaitForChild("MainRemotes"):WaitForChild("MainRemoteEvent")
else
end

local teleportButton = playerListSection:AddButton({
    Text = 'Teleport',
    Func = function()
        local selectedPlayer = playerDropdown.Value
        if selectedPlayer and selectedPlayer ~= '' then
            local targetPlayer = game.Players:FindFirstChild(selectedPlayer)
            if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild('HumanoidRootPart') then
                local localPlayer = game.Players.LocalPlayer
                if localPlayer.Character and localPlayer.Character:FindFirstChild('HumanoidRootPart') then
                    local targetPosition = targetPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, 5, 0)
                    localPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
                end
            end
        end
    end,
    DoubleClick = false,
    Tooltip = 'Teleport you to the selected target.',
})

local function proceedWithKnock(Target, selectedPlayer, localPlayer, humanoidRootPart, originalCFrame)
    local targetHRP = Target.Character:FindFirstChild("HumanoidRootPart")
    local targetHead = Target.Character:FindFirstChild("Head")
    
    if targetHead and targetHRP then
        enableStickySilentAim(Target)
        
        local targetHeadPos = targetHead.Position
        local stickToHeadPos = Vector3.new(targetHeadPos.X, targetHeadPos.Y + 5, targetHeadPos.Z)
        humanoidRootPart.CFrame = CFrame.new(stickToHeadPos)
        
        task.spawn(function()
            while Target and Target.Character and not KnockCheck(Target) do
                if not game.Players:FindFirstChild(selectedPlayer) then
                    api:notify(selectedPlayer .. " left the game", 5)
                    updatePlayerDropdown()
                    disableStickySilentAim()
                    return
                end
                
                if not localPlayer.Character or not localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    break
                end
                
                local currentTool = localPlayer.Character:FindFirstChildOfClass("Tool")
                if not currentTool or not currentTool:FindFirstChild("Handle") then
                    break
                end
                
                local currentTargetHRP = Target.Character:FindFirstChild("HumanoidRootPart")
                local currentTargetHead = Target.Character:FindFirstChild("Head")
                
                if currentTargetHRP and currentTargetHead then
                    local targetHeadPos = currentTargetHead.Position
                    local stickToHeadPos = Vector3.new(targetHeadPos.X, targetHeadPos.Y + 5, targetHeadPos.Z)
                    
                    humanoidRootPart.CFrame = CFrame.new(stickToHeadPos)
                    humanoidRootPart.Position = stickToHeadPos
                    
                    if hasForcefield(Target) then
                        task.wait(0.1)
                    else
                        for i = 1, 3 do
                            if Target and Target.Character and not KnockCheck(Target) and not hasForcefield(Target) then
                                humanoidRootPart.CFrame = CFrame.new(stickToHeadPos)
                                humanoidRootPart.Position = stickToHeadPos
                                
                                stickyAimActive = true
                                MainEvent:FireServer("ShootGun", currentTool.Handle, currentTool.Handle.Position, currentTargetHead.Position, currentTargetHead, Vector3.new(0, 1, 0))
                                task.wait(0.01)
                                stickyAimActive = false
                                task.wait(0.05)
                            else
                                if hasForcefield(Target) then
                                end
                                break
                            end
                        end
                    end
                else
                    break
                end
                
                task.wait(0.01)
            end
            
            if Target and Target.Character and KnockCheck(Target) then
            else
            end
            
            disableStickySilentAim()
            
            if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                localPlayer.Character.HumanoidRootPart.CFrame = originalCFrame
            end
        end)
    end
end

local teleportSubButton = teleportButton:AddButton({
    Text = 'Knock',
    Func = function()
        local selectedPlayer = playerDropdown.Value
        if selectedPlayer and selectedPlayer ~= '' then
            local Target = game.Players:FindFirstChild(selectedPlayer)
            local localPlayer = game.Players.LocalPlayer
            
            if Target and Target.Character and localPlayer.Character then
                local originalCFrame = localPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame
                local humanoidRootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
                local Tool = localPlayer.Character:FindFirstChildOfClass("Tool")
                
                if humanoidRootPart and Tool and Tool:FindFirstChild("Handle") then
                    local targetHRP = Target.Character:FindFirstChild("HumanoidRootPart")
                    local targetHead = Target.Character:FindFirstChild("Head")
                    
                    if targetHead and targetHRP then
                        if KnockCheck(Target) then
                            api:notify(selectedPlayer .. " is already knocked.", 2)
                            return
                        end
                        
                        if hasForcefield(Target) then
                            api:notify(selectedPlayer .. " is in an active protective barrier. Waiting...", 10)
                            
                            task.spawn(function()
                                while hasForcefield(Target) and Target and Target.Character do
                                    if not game.Players:FindFirstChild(selectedPlayer) then
                                        api:notify(selectedPlayer .. " left the game", 5)
                                        updatePlayerDropdown()
                                        return
                                    end
                                    task.wait(0.1)
                                end
                                
                                if Target and Target.Character then
                                    proceedWithKnock(Target, selectedPlayer, localPlayer, humanoidRootPart, originalCFrame)
                                end
                            end)
                        else
                            proceedWithKnock(Target, selectedPlayer, localPlayer, humanoidRootPart, originalCFrame)
                        end
                    end
                end
            end
        end
    end,
    DoubleClick = false,
})

local function proceedWithStomp(Target, selectedPlayer, localPlayer, humanoidRootPart, originalCFrame)
    local targetHRP = Target.Character:FindFirstChild("HumanoidRootPart")
    local targetHead = Target.Character:FindFirstChild("Head")
    
    if targetHead and targetHRP then
        enableStickySilentAim(Target)
        
        local targetHeadPos = targetHead.Position
        local stickToHeadPos = Vector3.new(targetHeadPos.X, targetHeadPos.Y + 5, targetHeadPos.Z)
        humanoidRootPart.CFrame = CFrame.new(stickToHeadPos)
        
        task.spawn(function()
            while Target and Target.Character and not KnockCheck(Target) do
                if not game.Players:FindFirstChild(selectedPlayer) then
                    api:notify(selectedPlayer .. " left the game", 5)
                    updatePlayerDropdown()
                    disableStickySilentAim()
                    return
                end
                
                if not localPlayer.Character or not localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    break
                end
                
                local currentTool = localPlayer.Character:FindFirstChildOfClass("Tool")
                if not currentTool or not currentTool:FindFirstChild("Handle") then
                    break
                end
                
                local currentTargetHRP = Target.Character:FindFirstChild("HumanoidRootPart")
                local currentTargetHead = Target.Character:FindFirstChild("Head")
                
                if currentTargetHRP and currentTargetHead then
                    local targetPos = currentTargetHRP.Position
                    
                    -- Randomized strafing around target
                    local strafeAngle = math.random() * math.pi * 2
                    local strafeRadius = math.random(6, 12)
                    local strafeHeight = math.random(3, 7)
                    
                    local strafeX = targetPos.X + math.cos(strafeAngle) * strafeRadius
                    local strafeZ = targetPos.Z + math.sin(strafeAngle) * strafeRadius
                    local strafePos = Vector3.new(strafeX, targetPos.Y + strafeHeight, strafeZ)
                    
                    -- Maintain upright orientation
                    humanoidRootPart.CFrame = CFrame.new(strafePos, targetPos)
                    humanoidRootPart.Position = strafePos
                    
                    if hasForcefield(Target) then
                        task.wait(0.1)
                    else
                        for i = 1, 3 do
                            if Target and Target.Character and not KnockCheck(Target) and not hasForcefield(Target) then
                                -- Keep strafing while shooting
                                local currentStrafeAngle = math.random() * math.pi * 2
                                local currentStrafeRadius = math.random(6, 12)
                                local currentStrafeHeight = math.random(3, 7)
                                
                                local currentStrafeX = targetPos.X + math.cos(currentStrafeAngle) * currentStrafeRadius
                                local currentStrafeZ = targetPos.Z + math.sin(currentStrafeAngle) * currentStrafeRadius
                                local currentStrafePos = Vector3.new(currentStrafeX, targetPos.Y + currentStrafeHeight, currentStrafeZ)
                                
                                humanoidRootPart.CFrame = CFrame.new(currentStrafePos, targetPos)
                                humanoidRootPart.Position = currentStrafePos
                                
                                stickyAimActive = true
                                MainEvent:FireServer("ShootGun", currentTool.Handle, currentTool.Handle.Position, currentTargetHead.Position, currentTargetHead, Vector3.new(0, 1, 0))
                                task.wait(0.01)
                                stickyAimActive = false
                                task.wait(0.05)
                            else
                                break
                            end
                        end
                    end
                else
                    break
                end
                
                task.wait(0.01)
            end
            
            if Target and Target.Character and KnockCheck(Target) then
                local originalHeadPos = Target.Character.Head.Position
                local stompAttempted = false
                
                task.wait(0.5)
                
                if Target.Character and Target.Character:FindFirstChild("LowerTorso") then
                    local bodyEffects = Target.Character:FindFirstChild("BodyEffects")
                    local originalHealth = 0
                    if bodyEffects and bodyEffects:FindFirstChild("Health") then
                        originalHealth = bodyEffects.Health.Value
                    end
                    
                    local currentLowerTorsoPos = Target.Character.LowerTorso.Position
                    local stickToLowerTorsoPos = Vector3.new(currentLowerTorsoPos.X, currentLowerTorsoPos.Y + 3, currentLowerTorsoPos.Z)
                    
                    humanoidRootPart.CFrame = CFrame.new(stickToLowerTorsoPos)
                    humanoidRootPart.Position = stickToLowerTorsoPos
                    
                    task.wait(0.1)
                    
                    if MainEvent then
                        -- Stomp first
                        MainEvent:FireServer("Stomp")
                        task.wait(0.5)
                        
                        -- Verify if target is really stomped
                        local bodyEffects = Target.Character:FindFirstChild("BodyEffects")
                        local currentHealth = 0
                        local isDead = false
                        
                        if bodyEffects then
                            local healthEffect = bodyEffects:FindFirstChild("Health")
                            if healthEffect then
                                currentHealth = healthEffect.Value
                            end
                            
                            local deathEffect = bodyEffects:FindFirstChild("SDeath")
                            if deathEffect then
                                isDead = deathEffect.Value
                            end
                        end
                        
                        local healthDiff = originalHealth - currentHealth
                        
                        if isDead then
                            api:notify('Target killed by stomp!', 3)
                        elseif healthDiff > 1.0 then
                            api:notify('Stomp hit!', 3)
                        else
                            -- If missed, stomp again
                            api:notify('Stomp might have missed, trying again...', 2)
                            task.wait(0.3)
                            MainEvent:FireServer("Stomp")
                            api:notify('Second stomp fired', 2)
                        end
                        
                        stompAttempted = true
                    else
                        api:notify('MainEvent not found for stomp!', 3)
                    end
                end
                
                if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    localPlayer.Character.HumanoidRootPart.CFrame = originalCFrame
                end
            else
                if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    localPlayer.Character.HumanoidRootPart.CFrame = originalCFrame
                end
            end
            
            disableStickySilentAim()
        end)
    end
end

local stompButton = playerListSection:AddButton({
    Text = 'Stomp',
    Func = function()
        local selectedPlayer = playerDropdown.Value
        if selectedPlayer and selectedPlayer ~= '' then
            local Target = game.Players:FindFirstChild(selectedPlayer)
            local localPlayer = game.Players.LocalPlayer
            
            if Target and Target.Character and localPlayer.Character then
                if KnockCheck(Target) then
                    local bodyEffects = Target.Character:FindFirstChild("BodyEffects")
                    local isDead = bodyEffects and bodyEffects:FindFirstChild("SDeath") and bodyEffects.SDeath.Value
                    
                    if isDead == false then
                        local savedPosition = localPlayer.Character.HumanoidRootPart.CFrame
                        
                        if Target.Character:FindFirstChild("LowerTorso") then
                            local bodyEffects = Target.Character:FindFirstChild("BodyEffects")
                            local originalHealth = 0
                            if bodyEffects and bodyEffects:FindFirstChild("Health") then
                                originalHealth = bodyEffects.Health.Value
                            end
                            
                            localPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Target.Character.LowerTorso.Position + Vector3.new(0, 3, 0))
                            
                            task.wait(0.1)
                            
                            if MainEvent then
                                -- Stomp first
                                MainEvent:FireServer("Stomp")
                                
                                -- Go back to original position
                                localPlayer.Character.HumanoidRootPart.CFrame = savedPosition
                                task.wait(0.5)
                                
                                -- Verify if target is really stomped
                                local bodyEffects = Target.Character:FindFirstChild("BodyEffects")
                                local currentHealth = 0
                                local isDead = false
                                
                                if bodyEffects then
                                    local healthEffect = bodyEffects:FindFirstChild("Health")
                                    if healthEffect then
                                        currentHealth = healthEffect.Value
                                    end
                                    
                                    local deathEffect = bodyEffects:FindFirstChild("SDeath")
                                    if deathEffect then
                                        isDead = deathEffect.Value
                                    end
                                end
                                
                                local healthDiff = originalHealth - currentHealth
                                
                                if isDead then
                                    api:notify('Target killed by stomp!', 3)
                                elseif healthDiff > 1.0 then
                                    api:notify('Stomp hit!', 3)
                                else
                                    -- If missed, tp to target and stomp again
                                    api:notify('Stomp might have missed, trying again...', 2)
                                    
                                    localPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Target.Character.LowerTorso.Position + Vector3.new(0, 3, 0))
                                    task.wait(0.3)
                                    
                                    MainEvent:FireServer("Stomp")
                                    api:notify('Second stomp fired', 2)
                                    
                                    task.wait(0.3)
                                    localPlayer.Character.HumanoidRootPart.CFrame = savedPosition
                                end
                            else
                                api:notify('MainEvent not found!', 3)
                                localPlayer.Character.HumanoidRootPart.CFrame = savedPosition
                            end
                        end
                    else
                        api:notify('Target is dead, cannot stomp', 3)
                    end
                else
                    local originalCFrame = localPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame
                    local humanoidRootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
                    local Tool = localPlayer.Character:FindFirstChildOfClass("Tool")
                    
                    if humanoidRootPart and Tool and Tool:FindFirstChild("Handle") then
                        local targetHRP = Target.Character:FindFirstChild("HumanoidRootPart")
                        local targetHead = Target.Character:FindFirstChild("Head")
                        
                        if targetHead and targetHRP then
                            if hasForcefield(Target) then
                                api:notify(selectedPlayer .. " is in an active protective barrier. Waiting...", 10)
                                
                                task.spawn(function()
                                    while hasForcefield(Target) and Target and Target.Character do
                                        if not game.Players:FindFirstChild(selectedPlayer) then
                                            api:notify(selectedPlayer .. " left the game", 5)
                                            updatePlayerDropdown()
                                            return
                                        end
                                        task.wait(0.1)
                                    end
                                    
                                    if Target and Target.Character and proceedWithStomp then
                                        pcall(function()
                                            proceedWithStomp(Target, selectedPlayer, localPlayer, humanoidRootPart, originalCFrame)
                                        end)
                                    end
                                end)
                            else
                                if proceedWithStomp then
                                    pcall(function()
                                        proceedWithStomp(Target, selectedPlayer, localPlayer, humanoidRootPart, originalCFrame)
                                    end)
                                end
                            end
                        end
                    else
                        api:notify('Please equip your gun before using Stomp', 3)
                    end
                end
            else
                api:notify('Target player not found or not loaded', 3)
            end
        else
            api:notify('No player selected for stomp', 3)
        end
    end,
    DoubleClick = false,
})

local function proceedWithBring(Target, selectedPlayer, localPlayer, humanoidRootPart, originalCFrame)
    local targetHRP = Target.Character:FindFirstChild("HumanoidRootPart")
    local targetHead = Target.Character:FindFirstChild("Head")
    
    if targetHead and targetHRP then
        enableStickySilentAim(Target)
        
        local targetHeadPos = targetHead.Position
        local stickToHeadPos = Vector3.new(targetHeadPos.X, targetHeadPos.Y + 5, targetHeadPos.Z)
        humanoidRootPart.CFrame = CFrame.new(stickToHeadPos)
        
        task.spawn(function()
            while Target and Target.Character and not KnockCheck(Target) do
                if not game.Players:FindFirstChild(selectedPlayer) then
                    api:notify(selectedPlayer .. " left the game", 5)
                    updatePlayerDropdown()
                    disableStickySilentAim()
                    return
                end
                
                if not localPlayer.Character or not localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    break
                end
                
                local currentTool = localPlayer.Character:FindFirstChildOfClass("Tool")
                if not currentTool or not currentTool:FindFirstChild("Handle") then
                    break
                end
                
                local currentTargetHRP = Target.Character:FindFirstChild("HumanoidRootPart")
                local currentTargetHead = Target.Character:FindFirstChild("Head")
                
                if currentTargetHRP and currentTargetHead then
                    local targetPos = currentTargetHRP.Position
                    
                    -- Randomized strafing around target
                    local strafeAngle = math.random() * math.pi * 2
                    local strafeRadius = math.random(6, 12)
                    local strafeHeight = math.random(3, 7)
                    
                    local strafeX = targetPos.X + math.cos(strafeAngle) * strafeRadius
                    local strafeZ = targetPos.Z + math.sin(strafeAngle) * strafeRadius
                    local strafePos = Vector3.new(strafeX, targetPos.Y + strafeHeight, strafeZ)
                    
                    -- Maintain upright orientation
                    humanoidRootPart.CFrame = CFrame.new(strafePos, targetPos)
                    humanoidRootPart.Position = strafePos
                    
                    if hasForcefield(Target) then
                        task.wait(0.1)
                    else
                        for i = 1, 3 do
                            if Target and Target.Character and not KnockCheck(Target) and not hasForcefield(Target) then
                                -- Keep strafing while shooting
                                local currentStrafeAngle = math.random() * math.pi * 2
                                local currentStrafeRadius = math.random(6, 12)
                                local currentStrafeHeight = math.random(3, 7)
                                
                                local currentStrafeX = targetPos.X + math.cos(currentStrafeAngle) * currentStrafeRadius
                                local currentStrafeZ = targetPos.Z + math.sin(currentStrafeAngle) * currentStrafeRadius
                                local currentStrafePos = Vector3.new(currentStrafeX, targetPos.Y + currentStrafeHeight, currentStrafeZ)
                                
                                humanoidRootPart.CFrame = CFrame.new(currentStrafePos, targetPos)
                                humanoidRootPart.Position = currentStrafePos
                                
                                stickyAimActive = true
                                MainEvent:FireServer("ShootGun", currentTool.Handle, currentTool.Handle.Position, currentTargetHead.Position, currentTargetHead, Vector3.new(0, 1, 0))
                                task.wait(0.01)
                                stickyAimActive = false
                                task.wait(0.05)
                            else
                                if hasForcefield(Target) then
                                end
                                break
                            end
                        end
                    end
                else
                    break
                end
                
                task.wait(0.01)
            end
            
            if Target and Target.Character and KnockCheck(Target) then
                local originalHeadPos = Target.Character.Head.Position
                local pickupAttempted = false
                
                task.wait(0.5)
                
                if Target.Character and Target.Character:FindFirstChild("Head") then
                    local currentHeadPos = Target.Character.Head.Position
                    local stickToHeadPos = Vector3.new(currentHeadPos.X, currentHeadPos.Y + 5, currentHeadPos.Z)
                    
                    humanoidRootPart.CFrame = CFrame.new(stickToHeadPos)
                    humanoidRootPart.Position = stickToHeadPos
                    
                    local VirtualInputManager = game:GetService("VirtualInputManager")
                    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.G, false, game)
                    task.wait(0.05)
                    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.G, false, game)
                    
                    pickupAttempted = true
                    
                    task.wait(0.5)
                end
                
                if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    localPlayer.Character.HumanoidRootPart.CFrame = originalCFrame
                end
            else
                if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    localPlayer.Character.HumanoidRootPart.CFrame = originalCFrame
                end
            end
            
            disableStickySilentAim()
        end)
    end
end


local stompSubButton = stompButton:AddButton({
    Text = 'Bring',
    Func = function()
        local selectedPlayer = playerDropdown.Value
        if selectedPlayer and selectedPlayer ~= '' then
            local Target = game.Players:FindFirstChild(selectedPlayer)
            local localPlayer = game.Players.LocalPlayer
            
            if Target and Target.Character and localPlayer.Character then
                local originalCFrame = localPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame
                local humanoidRootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
                local Tool = localPlayer.Character:FindFirstChildOfClass("Tool")
                
                if humanoidRootPart and Tool and Tool:FindFirstChild("Handle") then
                    local targetHRP = Target.Character:FindFirstChild("HumanoidRootPart")
                    local targetHead = Target.Character:FindFirstChild("Head")
                    
                    if targetHead and targetHRP then
                        if hasForcefield(Target) then
                            api:notify(selectedPlayer .. " is in an active protective barrier. Waiting...", 10)
                            
                            task.spawn(function()
                                while hasForcefield(Target) and Target and Target.Character do
                                    if not game.Players:FindFirstChild(selectedPlayer) then
                                        api:notify(selectedPlayer .. " left the game", 5)
                                        updatePlayerDropdown()
                                        return
                                    end
                                    task.wait(0.1)
                                end
                                
                                if Target and Target.Character then
                                    proceedWithBring(Target, selectedPlayer, localPlayer, humanoidRootPart, originalCFrame)
                                end
                            end)
                        else
                            proceedWithBring(Target, selectedPlayer, localPlayer, humanoidRootPart, originalCFrame)
                        end
                    end
                end
            end
        end
    end,
    DoubleClick = false,
})


playerListSection:AddLabel('@wanderkidd', true)
